# smooth_live_plot.py

from collections import deque
import dash
from dash import dcc, html
from dash.dependencies import Output, Input
import plotly.graph_objs as go
import time

def smooth_live_plot(data_fn, labels=['X', 'Y', 'Z'], buffer_size=100, update_interval=200, graph_title="Live Data Stream"):
    """
    Live smooth Dash plot for continuous multi-channel data.

    Args:
        data_fn: A function that returns a tuple of current data values (e.g., sensor readings).
        labels: List of labels for each data channel (e.g., ['X', 'Y', 'Z'] for 3-axis sensor).
        buffer_size: Number of recent samples to display on the graph.
        update_interval: Time interval (in ms) to update the graph.
        graph_title: Title shown at the top of the dashboard.

    Returns:
        Starts and runs a Dash web application with real-time graph updates.
    """

    # Create circular buffers for each label to store recent values
    buffers = {label: deque([0]*buffer_size, maxlen=buffer_size) for label in labels}
    # Store timestamps for X-axis, initialized with current time
    timestamps = deque([time.time()]*buffer_size, maxlen=buffer_size)

    # Create Dash app instance
    app = dash.Dash(name)

    # Define the layout of the app: title, graph, and an interval component
    app.layout = html.Div([
        html.H3(graph_title, style={'textAlign': 'center'}),  # Title centered at the top
        dcc.Graph(id='live-graph'),  # Placeholder for the graph
        dcc.Interval(id='interval', interval=update_interval, n_intervals=0)  # Timer to trigger updates
    ])

    # Callback function that updates the graph at each interval tick
    @app.callback(Output('live-graph', 'figure'), Input('interval', 'n_intervals'))
    def update(n):
        # Fetch latest data from the data function
        new_values = data_fn()
        now = time.time()

        # Append new values to each channel buffer
        for label, value in zip(labels, new_values):
            buffers[label].append(value)

        # Update timestamp buffer
        timestamps.append(now)

        # Create a Plotly figure with smooth lines for each channel
        fig = go.Figure()
        for label in labels:
            fig.add_trace(go.Scatter(
                x=list(timestamps),  # X-axis: timestamps
                y=list(buffers[label]),  # Y-axis: corresponding buffer values
                mode='lines',
                name=label
            ))

        # Update figure layout with titles and styling
        fig.update_layout(
            xaxis_title="Time",
            yaxis_title="Value",
            template="plotly_dark",  # Use dark theme
            margin=dict(l=40, r=20, t=40, b=40),  # Padding around the plot
            uirevision=True  # Prevent plot from resetting on update
        )
        return fig

    # Run the Dash app in debug mode
    app.run(debug=True)
